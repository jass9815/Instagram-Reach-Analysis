Description
## Importing libraries

import pandas as pd 
import numpy as np 
import matplotlib.pyplot as plt 
import seaborn as sns
import plotly.express as px

from wordcloud import WordCloud,STOPWORDS,ImageColorGenerator

from sklearn.model_selection import train_test_split

from sklearn.linear_model import PassiveAggressiveRegressor

data=pd.read_csv("Instagram data.csv",encoding='latin1')

print(data.head())

## letâ€™s have a look at whether this dataset contains any null values or not

data.isnull().sum()

data=data.dropna()

## insights of the columns to understand the data type of all the columns

data.info()

## Analyzing Instagram Reach

plt.figure(figsize=(10, 8))
plt.style.use('fivethirtyeight')
plt.title('Distribution of Impression From Home')
sns.distplot(data['From Home'])
plt.show()

plt.figure(figsize=(10, 8))
plt.title("Distribution of Impressions From Hashtags")
sns.distplot(data['From Hashtags'])
plt.show()

plt.figure(figsize=(10, 8))
plt.title("Distribution of Impressions From Explore")
sns.distplot(data['From Explore'])
plt.show()

hashtags=data["From Hashtags"].sum()
home=data["From Home"].sum()
explore=data["From Explore"].sum()
other=data["From Other"].sum()
labels=['From Home','From HashTags','From Explore','Other']
values= [home,hashtags,explore,other]
fig = px.pie(data, values=values, names=labels, 
             title='Impressions on Instagram Posts From Various Sources', hole=0.5)
fig.show()

text = " ".join(i for i in data.Caption)
stopwords = set(STOPWORDS)
wordcloud = WordCloud(stopwords=stopwords, background_color="white").generate(text)
plt.style.use('classic')
plt.figure( figsize=(12,10))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis("off")
plt.show()

text= " ".join(i for i in data.Hashtags)
stopwords= set(STOPWORDS)
wordcloud=WordCloud(stopwords=stopwords,background_color='white').generate(text)
plt.figure(figsize=(12,10))
plt.imshow(wordcloud,interpolation='bilinear')
plt.axis("off")
plt.show()

## Relationships

figure=px.scatter(data_frame=data, x="Impressions",y="Likes",size="Likes",trendline="ols",
                 title="Relationship Between Likes and Impressions")
figure.show()

fligure=px.scatter(data_frame=data,x="Impressions",y="Comments",size="Comments",trendline="ols",title="Relationship Between Comments and Total Impressions")
figure.show()

figure=px.scatter(data_frame=data,x="Impressions",
                 y="Shares",size="Shares",trendline="ols",title="Relationship Between Shares and Total Impressions")
figure.show()

figure=px.scatter(data_frame=data,x="Impressions",
                 y="Saves",size="Saves",trendline="ols",
                 title="Relationship Between Post Saves and Total Impressions")
figure.show()

## Correlation 

correlation=data.corr()
print(correlation["Impressions"])

conversion_rate=(data["Follows"].sum()/data["Profile Visits"].sum())*100
print(conversion_rate)

#relationship between the total profile visits and the number of followers gained from all profile visits

figure=px.scatter(data_frame=data,x="Profile Visits",
                 y="Follows",size="Follows",trendline="ols",title="Relationship Between Profile Visits and Followers Gained")
figure.show()

## Instagram Reach Prediction Model

x = np.array(data[['Likes', 'Saves', 'Comments', 'Shares', 
                   'Profile Visits', 'Follows']])
y = np.array(data["Impressions"])
xtrain, xtest, ytrain, ytest = train_test_split(x, y, 
                                                test_size=0.2, 
                                                random_state=42)

model=PassiveAggressiveRegressor()
model.fit(xtrain,ytrain)
model.score(xtest,ytest)

features = np.array([[282.0, 233.0, 4.0, 9.0, 165.0, 54.0]])
model.predict(features)



